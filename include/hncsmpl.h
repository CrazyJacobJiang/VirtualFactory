/*
* Copyright (c) 2013, 武汉华中数控股份有限公司
* All rights reserved.
* 
* 文件名称：hncsmpl.h
* 文件标识：根据配置管理计划书
* 摘    要：采样
* 运行平台：Linux/Windows
* 
* 版    本：1.00
* 作    者：HNC-8 Team
* 日    期：2013年9月25日
* 说    明：
*/

#ifndef __HNC_SMPL_H__
#define __HNC_SMPL_H__

#include "hncdatatype.h"

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplLoad(Bit8 *fileName)
//
//    功能：
//            读取采样配置文件
//
//    参数：
//            fileName ：配置文件名；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SamplLoad(Bit8 *fileName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplSave(Bit8 *fileName)
//
//    功能：
//            保存采样配置文件
//
//    参数：
//            fileName ：配置文件名；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SamplSave(Bit8 *fileName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplGetPeriod(Bit32 ch, Bit32 *tick, Bit16 clientNo = 0)
//
//    功能：
//            获取采样周期
//
//    参数：
//            ch	采样通道号
//            tick	插补周期的整数倍
//            clientNo	网络连接号
//
//    描述：
//            
//
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetPeriod(Bit32 ch, Bit32 *tick, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetPeriod(Bit32 ch, Bit32 tick, Bit16 clientNo = 0)
//
//    功能：
//            设置采样周期
//
//    参数：
//            ch	采样通道号
//            tick	插补周期的整数倍
//            clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetPeriod(Bit32 ch, Bit32 tick, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetLmt(Bit32 ch, Bit32 *type, Bit32 *n, Bit16 clientNo = 0);
//
//    功能：
//            获取采样截止的方式和采样个数
//
//    参数：
//			ch	采样通道号
//			type	采样停止的方式
//       			0：循环采样
//       			-1：通过外部信号来停止采样
//       			-(ch+10)：通过程序结束信号来停止采样，ch表示通道号
//           		n	采样个数[1-10000]
//			clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetLmt(Bit32 ch, Bit32 *type, Bit32 *n, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetLmt(Bit32 ch, Bit32 type, Bit32 n, Bit16 clientNo = 0);
//
//    功能：
//            设置采样截止的方式和采样个数
//
//    参数：
//			ch	采样通道号
//			type	采样停止的方式
//       			0：循环采样
//       			-1：通过外部信号来停止采样
//       			-(ch+10)：通过程序结束信号来停止采样，ch表示通道号
//					1：填满通道方式
//           n	采样个数[1-10000]
//			clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetLmt(Bit32 ch, Bit32 type, Bit32 n, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetChannel(Bit32 *chnNum, Bit16 clientNo = 0);
//
//    功能：
//            获取采样通道数
//
//    参数：
//               chnNum	采样通道数
//               clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetChannel(Bit32 *chnNum, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetChannel(Bit32 chnNum, Bit16 clientNo = 0);
//
//    功能：
//            设置采样通道数
//
//    参数：
//               chnNum	采样通道数
//               clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetChannel(Bit32 chnNum, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetDevNo(Bit32 chn, Bit16 *axisNo, Bit16 clientNo = 0);
//
//    功能：
//            获取指定采样通道的逻辑轴号
//
//    参数：
//                 ch	采样通道号
//                 axisNo	采样通道ch对应的逻辑轴号
//                clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SamplGetDevNo(Bit32 ch, Bit16 *axisNo, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetDevNo(Bit32 ch, Bit16 axisNo, Bit16 clientNo = 0);
//
//    功能：
//            设置指定采样通道的逻辑轴号
//
//    参数：
//                 ch	采样通道号
//                 axisNo	采样通道ch对应的逻辑轴号
//                clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SamplSetDevNo(Bit32 ch, Bit16 axisNo, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetPropertyType(Bit32 ch, Bit16 *type, Bit16 *axisNo, Bit16 clientNo)
//
//    功能：
//            获取指定采样通道的通用数据类型和逻辑轴号
//
//    参数：
//				ch	采样通道号
//				type	所需采样对象的通用数据类型
//              axisNo 逻辑轴号
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetPropertyType(Bit32 ch, Bit16 *type, Bit16 *axisNo, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetPropertyType(Bit32 ch, Bit32 type, Bit32 axisNo, Bit16 clientNo = 0);
//
//    功能：
//            设置指定采样通道的通用数据类型和逻辑轴号
//
//    参数：
//				ch	采样通道号
//				type	所需采样对象的通用数据类型
//              axisNo 逻辑轴号
//				clientNo	网络连接号
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetPropertyType(Bit32 ch, Bit32 type, Bit32 axisNo, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetRegType(Bit32 ch, Bit32 type, Bit32 offset, Bit32 dataLen, Bit16 clientNo)
//
//    功能：
//            设置指定采样通道的寄存器或变量数据类型、数据长度、偏移
//
//    参数：
//				ch	采样通道号
//				type	所需采样对象的数据类型
//				offset	偏移量
//				dataLen	单个采样数据长度
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetRegType(Bit32 ch, Bit32 type, Bit32 offset, Bit32 dataLen, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetRegType(Bit32 ch, Bit16 *type, Bit32 *offset, Bit32 *dataLen, Bit16 clientNo = 0);
//
//    功能：
//            获取指定采样通道的寄存器或变量数据类型、数据长度、偏移
//
//    参数：
//				ch	采样通道号
//				type	所需采样对象的数据类型
//				offset	偏移量
//				dataLen	单个采样数据长度
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetRegType(Bit32 ch, Bit16 *type, Bit32 *offset, Bit32 *dataLen, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplReset(Bit32 ch, Bit16 clientNo = 0);
//
//    功能：
//            复位采样数据区
//
//    参数：
//				ch	采样通道号
//				clientNo	网络连接号
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplReset(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplTriggerOn(Bit16 clientNo = 0);
//
//    功能：
//            开启采样功能
//
//    参数：
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplTriggerOn(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplTriggerOff(Bit16 clientNo = 0);
//
//    功能：
//            关闭采样功能
//
//    参数：
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplTriggerOff(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplSetNum(Bit32 ch, Bit32 num, Bit16 clientNo = 0);
//
//    功能：
//             设置当前采样通道采样个数
//
//    参数：
//				ch	采样通道号
//				num	当前的实际采样个数
//				clientNo	网络连接号
//
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplSetNum(Bit32 ch, Bit32 num, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetNum(Bit32 ch, Bit32 *num, Bit16 clientNo = 0);
//
//    功能：
//             获取当前采样通道采样个数
//
//    参数：
//				ch	采样通道号
//				num	当前的实际采样个数
//				clientNo	网络连接号
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetNum(Bit32 ch, Bit32 *num, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//    Bit32 HNC_SamplGetData(Bit32 ch, Bit32 *num, Bit32 *buf, Bit16 clientNo)
//
//    功能：
//            获取指定采样通道的采样数据区起始地址
//
//    参数：
//				ch：采样通道号
//				num：输入：计划获取采样点个数 输出：实际获取采样点个数
//				buf：获取采样数据缓冲区
//				clientNo：客户号
//    描述：
//    返回：
//              0：成功；
//				1	异步获取寄存器，未获取到寄存器数据
//				2	函数与获取的寄存器类型不匹配
//				-1	寄存器组号超过最大限制
//				-2	寄存器位号超过最大限制
//				-3	寄存器不允许修改（P寄存器）
//				-4	超过采样通道个数
//				-5	超过当前逻辑轴号
//				-6	超过最大采样类型数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetData(Bit32 ch, Bit32 *num, Bit32 *data, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplGetStat(Bit16 clientNo)
//
//    功能：
//            判断采样状态
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            1：正在采样；0：没有采样；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetStat(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplSetAdjustStat(Bit8 val)
//
//    功能：
//            触发式采样开关
//
//    参数：
//			val:	1：开 0：关
//
//    描述：
//            
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
HNCAPI void HNC_SamplSetAdjustStat(Bit8 val);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SamplGetAdjustStat()
//
//    功能：
//            获取触发式采样开关状态
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            1：开；0：关；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SamplGetAdjustStat();

#endif
