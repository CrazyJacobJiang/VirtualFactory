/*
* Copyright (c) 2013, 武汉华中数控股份有限公司
* All rights reserved.
* 
* 文件名称：hncfprogman.h
* 文件标识：根据配置管理计划书
* 摘    要：程序管理
* 运行平台：Linux/Windows
* 
* 版    本：1.00
* 作    者：HNC-8 Team
* 日    期：2013年9月25日
* 说    明：
*/

#ifndef __HNC_FPROG_MAN_H__
#define __HNC_FPROG_MAN_H__

#include "hncdatatype.h"

#define	MDI_NAME	"MDI"
#define PROG_PATH_SIZE (60)

//编辑区大小的定义
#define  MAX_EDIT_MEMORY_SIZE         50*1024*1024 //50M
#define MAX_EDITABLE_FILE_SIZE        MAX_EDIT_MEMORY_SIZE/2

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogInit(Bit8 *p)
//
//    功能：
//           程序管理器初始化
//
//    参数：
//            p：程序管理器的内存指针；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogInit(Bit8 *p);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogExit(void)
//
//    功能：
//           程序管理器退出
//
//    参数：
//            
//
//    描述：
//            
//
//    返回：
//           
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogExit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogReset(Bit32 ch)
//
//    功能：
//           指定通道复位程序管理器
//
//    参数：
//            ch：通道号
//    描述：
//            
//
//    返回：
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogReset(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogReadProcess(void)
//
//    功能：
//           程序管理周期进程
//
//    参数：
//
//    描述：
//            必须周期性调用
//
//    返回：
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogReadProcess(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogLoad(Bit32 ch, Bit8 *progName)
//
//    功能：
//           指定通道加载程序
//
//    参数：
//            ch：通道号
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogLoad(Bit32 ch, Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogDeleteProg(Bit8 *progName)
//
//    功能：
//           删除程序
//
//    参数：            
//			  progName：文件名
//    描述：
//            如果此程序被加载，那么超大程序不能删除
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogDeleteProg(Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogNewFile(Bit8 *progName)
//
//    功能：
//           新建程序
//
//    参数：
//            
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogNewFile(Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogPreviewInit(Bit8 *progName)
//
//    功能：
//           预览初始化
//
//    参数：
//			  progName：文件名
//    描述：
//            
//
//    返回：
//              0	非加密文件
//				1	加密可写
//				2	加密只读
//				3	加密不可显
//				-1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogPreviewInit(Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogPreviewGetRow(Bit32 line, Bit8 *buf, Bit32 len)
//
//    功能：
//           预览取行
//
//    参数：
//            line：行号
//			  buf：存放取出行内容的缓冲区
//            len：长度
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogPreviewGetRow(Bit32 line, Bit8 *buf, Bit32 len);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogPreviewRowNum(void)
//
//    功能：
//           预览区行数
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            预览区行数；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogPreviewRowNum(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogViewGetRow(Bit32 ch, Bit32 line, Bit8 *buf)
//
//    功能：
//           指定通道加载程序
//
//    参数：
//            ch：通道号
//            line： 行号
//			  buf：存放取出行内容的缓冲区
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogViewGetRow(Bit32 ch, Bit32 line, Bit8 *buf,Bit32 len);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogViewRowNum(Bit32 ch)
//
//    功能：
//           运行时取程序总行数
//
//    参数：
//            ch：通道号
//    描述：
//				对于大程序、超大程序，无法返回总行数
//            
//
//    返回：
//            行数；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogViewRowNum(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetFullName(Bit32 ch, Bit8 progName[PROG_PATH_SIZE], Bit16 clientNo = 0)
//
//    功能：
//           取通道加载的程序的名字（含路径）
//
//    参数：
//            ch：通道号
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogGetFullName(Bit32 ch, Bit8 *progName, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogSetFullName(Bit32 ch, Bit8 * progName);
//
//    功能：
//           设置通道加载的程序的名字（含路径）
//
//    参数：
//            ch：通道号
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogSetFullName(Bit32 ch, Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetEncryptLevel(Bit8 *progName)
//
//    功能：
//           获取文件加密级别
//
//    参数：
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            -1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogGetEncryptLevel(Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetChProgEncryptLevel(Bit32 ch)
//
//    功能：
//           取通道加载程序的加密级别
//
//    参数：
//            ch：通道号
//    描述：
//            
//
//    返回：
//              0	非加密文件
//				1	加密可写
//				2	加密只读
//				3	加密不可显
//				-1	失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogGetChProgEncryptLevel(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogMdiInit(void);
//
//    功能：
//           MDI初始化
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogMdiInit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogMdiClear(void);
//
//    功能：
//           MDI内存清空
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogMdiClear(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogMdiConfirm(void)
//
//    功能：
//           MDI输入内容确认
//
//    参数：
//          
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogMdiConfirm(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogMdiExit(void)
//
//    功能：
//           MDI退出
//
//    参数：
//            
//    描述：
//            
//
//    返回：
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogMdiExit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditInit(Bit8 *progName)
//
//    功能：
//           程序编辑初始化
//
//    参数：
//			  progName：文件名
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditInit(Bit8 *progName);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogEditExit(void)
//
//    功能：
//           程序编辑器退出
//
//    参数：
//           
//    描述：
//            
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogEditExit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditSave(Bit8 *progName, Bit32 force)
//
//    功能：
//           保存程序
//
//    参数：
//			  progName：文件名
//            force：强制写标志
//    描述：
//            如果通道中已经加载了同名文件，且系统在循环启动状态，则不回写文件
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditSave(Bit8 *progName, Bit32 force);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditGetRow(Bit32 line, Bit8 *buf, Bit32 len)
//
//    功能：
//           编辑器取行
//
//    参数：
//            line：行号
//			  buf：存放取出行的缓冲区
//            len：长度
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditGetRow(Bit32 line, Bit8 *buf, Bit32 len);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditSetRow(Bit32 line, Bit8 *buf);
//
//    功能：
//           编辑器设置行
//
//    参数：
//            line：行号
//			  buf：存放设置行内容的缓冲区
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；-2：内存不足
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditSetRow(Bit32 line, Bit8 *buf);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditInsertRows(Bit32 insertBeforeLine, Bit32 howManyLines)
//
//    功能：
//           编辑器插入行
//
//    参数：
//            insertBeforeLine：插入起始行号
//			  howManyLines：插入多少行
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；-2：内存不足
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditInsertRows(Bit32 insertBeforeLine, Bit32 howManyLines); 

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditDeleteRows(Bit32 deleteLineBegin, Bit32 howManyLines)
//
//    功能：
//           编辑器删除行
//
//    参数：
//            deleteLineBegin：删除起始行号
//			  howManyLines：删除多少行
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditDeleteRows(Bit32 deleteLineBegin, Bit32 howManyLines);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditGetRowNum(void)
//
//    功能：
//           编辑器返回总行数
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            行数；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditGetRowNum(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogEditGetChangeFlag(void)
//
//    功能：
//           程序编辑器是否发生变化
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            1：发生变化；0：未发生变化；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogEditGetChangeFlag(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogRandomInit(Bit32 ch, Bit16 clientNo);
//
//    功能：
//           任意行初始化
//
//    参数：
//            ch：通道号
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogRandomInit(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogRandomLoad(Bit32 line, Bit16 clientNo);
//
//    功能：
//           装载任意行
//
//    参数：
//            line：行号
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogRandomLoad(Bit32 line, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogRandomWriteback(Bit32 line, Bit8 flag, Bit16 clientNo)
//
//    功能：
//           任意行回写执行内存
//
//    参数：
//            flag = 1: 扫描模式强制写回，用于断点
//			  line：行号
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogRandomWriteback(Bit32 line, Bit8 flag = 0, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogRandomExit(Bit16 clientNo)
//
//    功能：
//           任意行退出
//
//    参数：
//            
//    描述：
//              1、在任意行界面按下返回时调用
//				2、在任意行界面下，指定行号后，按循环启动调用
//				3、在任意行界面下，指定行号后，切到其他界面调用
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogRandomExit(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetNthLine(Bit32 ch, Bit32 n)
//
//    功能：
//          根据N号返回行号
//
//    参数：
//            ch：通道号
//			  n：N号
//    描述：
//            只对小程序有效
//
//    返回：
//            行号；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogGetNthLine(Bit32 ch, Bit32 n);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogNetInit(Bit32 ch, Bit8 *progName, Bit32 *filesize)
//
//    功能：
//          网络装载文件初始化
//
//    参数：
//            ch：通道号
//			  progName：文件名
//            filesize：文件大小，函数内部会修改此值，通知可用大小 
//    描述：
//            
//
//    返回：
//            允许传送文件的大小；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogNetInit(Bit32 ch, Bit8 *progName, Bit32 *filesize, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogNetLoad(Bit32 ch, Bit8 *buf, Bit32 bufsize, Bit32 islast)
//
//    功能：
//          网络装载文件
//
//    参数：
//            ch：通道号
//			  buf：文件内容缓冲区
//            bufsize：缓冲区大小 
//            islast：是否是最后一个包
//    描述：
//            同打开本地文件一样，不停的调用此函数直到把文件执行内存填满
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogNetLoad(Bit32 ch, Bit8 *buf, Bit32 bufsize, Bit32 islast, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_FprogClear()
//
//    功能：
//          清空各通道中的内存
//
//    参数：
//            
//			  
//            
//            
//    描述：
//            清空各通道中的内存
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_FprogClear();

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogBpSetDcdRow()
//
//    功能：
//          断点设置解释行
//
//    参数：
//            
//			  
//            
//            
//    描述：
//            断点设置解释行
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogBpSetDcdRow();

///////////////////////////////////////////////////////////////////////////////
//
//    extern Bit32 HNC_FprogRandomMSTRecover(Bit32 ch)
//
//    功能：
//            mst恢复
//
//    参数：
//            ch ：通道号
//
//    描述：
//            创建行索引及更改任意行状态
//
//    返回：
//            0：成功
//			  -1：失败
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogRandomMSTRecover(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogRandomMSTRelease(Bit32 ch)
//
//    功能：
//          MST内存释放
//
//    参数：
//            ch:通道号
//			  
//            
//            
//    描述：
//            释放该通道对应的MST内存
//
//    返回：
//            0：成功
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogRandomMSTRelease(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit16 HNC_FprogRandomSubTreeView(Bit16 idx,Bit8 type, Bit16 *sub_no)
//
//    功能：
//          绘制任意行时扫描的子程序结构树
//
//    参数：
//        输入参数    idx: 要超找的序号（相当于树地址）
//				      type: 1 ：返回左子树地址 2：返回右子树地址
//            
//		  输出参数	  *sub_no: idx树的程序号
//					  返回值: 左子树或右子树的地址（根据type决定）
//
//    描述：
//            
//
//    返回：
//            -1：不存在
//
//////////////////////////////////////////////////////////////////////////
extern Bit16 HNC_FprogRandomSubTreeView(Bit16 idx,Bit8 type, Bit16 *sub_no);

///////////////////////////////////////////////////////////////////////////////
//
//    extern Bit32 HNC_FiftyIdxForview(Bit32 ch)
//
//    功能：
//            为解释行后50行创建行索引
//
//    参数：
//            ch ：通道号
//
//    描述：
//            
//
//    返回：
//            0：成功
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FiftyIdxForview(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogSubProgGetRow(Bit32 ch, Bit32 line, Bit8 *buf,Bit32 len)
//
//    功能：
//          扫描模式显示 mst 的g代码
//
//    参数：
//       
//				      
//            
//		  
//					  
//
//    描述：
//            
//
//    返回：
//            -1：不存在
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogSubProgGetRow(Bit32 ch, Bit32 line, Bit8 *buf,Bit32 len);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetProgPathByIdx(Bit32 pindex, Bit8 *progName)
//
//    功能：
//            根据索引号获取程序名
//
//    参数：
//            pindex ：程序索引号
//            progName ：程序名
//
//    描述：
//            
//
//    返回：
//            -1：失败
//			   0：成功
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogGetProgPathByIdx(Bit32 pindex, Bit8 *progName, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogMdiSetContent(Bit8 *txt, Bit32 txtLen)
//
//    功能：
//            设置mdi的文本
//
//    参数：
//            txt ：设置的文本
//            txtLen ：文本长度
//
//    描述：
//            总行数不能超过64行
//
//    返回：
//            0：成功
//			  -1：空指针
//			  -2：行数超过限制行数
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_FprogMdiSetContent(Bit8 *txt, Bit32 txtLen, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_FprogGetEditFileSize(Bit32 *fileSize)
//
//    功能：
//            获取编辑器中文件大小
//
//    参数：
//            fileSize:文件大小，单位：字节
//            
//
//    描述：
//            
//
//    返回：
//            0：成功
//			  -1：空指针
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_FprogGetEditFileSize(Bit32 *fileSize);

#endif // __HNC_FPROG_MAN_H__
