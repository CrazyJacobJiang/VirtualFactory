/*
* Copyright (c) 2012, 武汉华中数控股份有限公司开发二部
* All rights reserved.
* 
* 文件名称：hncsysctrl.h
* 文件标识：根据配置管理计划书
* 摘    要：系统控制管理，解释器进程、MDI进程、断点保存恢复、非参数空闲时保存与加载等接口
* 运行平台：Linux/Windows
* 
* 版    本：1.00
* 作    者：HNC-8 Team
* 日    期：2010年3月18日
* 说    明：
*/

#ifndef __HNC_SYS_CTRL_H__
#define __HNC_SYS_CTRL_H__

#include "hncdatatype.h"

// 系统配置类型
enum SysConfigType
{
	HNC_SYS_CFG_BIN_PATH = 0,
	HNC_SYS_CFG_BMP_PATH,
	HNC_SYS_CFG_DATA_PATH,
	HNC_SYS_CFG_HELP_PATH,
	HNC_SYS_CFG_PARM_PATH,
	HNC_SYS_CFG_PLC_PATH,
	HNC_SYS_CFG_PROG_PATH,
	HNC_SYS_CFG_TEMP_PATH,

	HNC_SYS_CFG_PATH_TOTAL,

	HNC_SYS_CFG_PARM_FILE,
	HNC_SYS_CFG_PLC_FILE,

	HNC_SYS_CFG_LOG_PATH,

	HNC_SYS_CONFIG_TOTAL
};

//	初始化类型
enum InitType
{
	INIT_READCFG = 0,	//	读系统配置文件
	INIT_KERNEL,		//	内核初始化
	INIT_PARM,			//	参数初始化
	INIT_FILECHECK,
	INIT_PASS,			//	密码初始化
	INIT_NET,			//	网络初始化
	INIT_PROGMAN,		//	程序管理初始化(必须要在参数初始化之后，因为要根据通道数来初始化)
	INIT_MDI,			//	MDI初始化
	INIT_PLC,			//	PLC初始化
	INIT_ALARM,			//	报警初始化
	INIT_FILELOAD,		//	数据文件导入
	INIT_BUS,			//	总线初始化
};

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlStepInit(Bit32 type)
//
//    功能：
//            系统控制模块分步初始化
//
//    参数：
//				type：初始化类型
//
//    描述：
//            
//
//    返回：
//            0：成功；其他：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlStepInit(Bit32 type);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlInit(void)
//
//    功能：
//            系统控制模块初始化
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；<0：失败；
//            -1：系统配置文件加载失败；
//            -2：内存不足；
//            -3：参数初始化失败；
//            -4：程序管理初始化失败；
//            -5：PLC加载失败；
//            -6：报警初始化失败；
//            -101：网络初始化失败；
//
///////////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlInit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_SysCtrlExit(void)
//
//    功能：
//            系统控制模块退出
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_SysCtrlExit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_SysCtrlSave(uBit16 key)
//
//    功能：
//            根据事件保存数据至磁盘文件
//
//    参数：
//            key   ：事件号；
//
//    描述：
//
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_SysCtrlSave(uBit16 key);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlSelectProg(Bit32 ch, Bit8 *name, Bit16 clientNo = 0)
//
//    功能：
//            加载加工G代码程序
//
//    参数：
//            ch   ：通道号；
//            name ：G代码文件完整路径文件名；
//
//    描述：
//            NCU处理后发送ncEvtLoadOK；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlSelectProg(Bit32 ch, const char *name, Bit16 clientNo = 0);

/////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlLoadProg(Bit32 ch, const char *name, Bit16 clientNo);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlStopProg(Bit32 ch)
//
//    功能：
//            停止通道正在运行的程序
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            NCU处理后发送ncEvtStopAck;
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlStopProg(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlResetProg(Bit32 ch)
//
//    功能：
//            重新运行停止的程序
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            NCU处理后发送ncEvtRwndFin；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlResetProg(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlResetChannel(Bit32 ch)
//
//    功能：
//            复位指定通道的解释器和控制器
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlResetChannel(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlResetAll(void)
//
//    功能：
//            复位所有通道的解释器和控制器
//
//    参数：
//            
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlResetAll(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlSkipRowReq(Bit32 ch)
//
//    功能：
//            任意行请求
//
//    参数：
//            ch  ：通道号；
//
//    描述：
//            NCU处理后发送ncEvtRunRowAck；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlSkipRowReq(Bit32 ch);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlSkipToRow(Bit32 ch, Bit32 row)
//
//    功能：
//            程序跳转到指定行
//
//    参数：
//            ch  ：通道号；
//            row ：目的行号；
//
//    描述：
//            NCU处理后发送ncEvtRunRowRdy；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlSkipToRow(Bit32 ch, Bit32 row, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiTry(Bit32 ch, Bit16 clientNo)
//
//    功能：
//            测试MDI能否开启
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            测试必须通过才能执行后续的Req、Open；
//
//    返回：
//            0：成功；-1：参数错；-2：加工；-3：回零；-4：轴移动；-5：单段；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiTry(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiReq(Bit32 ch, Bit16 clientNo)
//
//    功能：
//            MDI请求
//
//    参数：
//            ch ：通道号；
//
//    描述：
//            Try成功后才能执行；
//            NCU处理后发送ncEvtMdiRdy；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiReq(Bit32 ch, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiOpen(Bit16 clientNo)
//
//    功能：
//            MDI开启
//
//    参数：
//
//    描述：
//            Try和Req执行成功后，收到ncEvtMdiRdy时才能执行；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiOpen(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiUpdate(Bit32 rowNum, Bit16 clientNo)
//
//    功能：
//            更新MDI数据
//
//    参数：
//            rowNum ：总行数；
//
//    描述：
//            NCU处理后发送ncEvtMdiAck；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiUpdate(Bit32 rowNum, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiGetBlk(Bit64 *pos, Bit32 *msft, Bit64 *ijkr, Bit16 clientNo)
//
//    功能：
//            获取MDI数据
//
//    参数：
//            pos ：CHAN_AXES_NUM个通道轴的坐标；
//            msft ：10个数据，分别是m[0~3]、s[0~3]、f、t；
//            ijkr ：4个数据，分别是i、j、k、r；
//
//    描述：
//            
//
//    返回：
//            0：成功；<0：错误号；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiGetBlk(Bit64 *pos, Bit32 *msft, Bit64 *ijkr, Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiClear(Bit16 clientNo)
//
//    功能：
//            MDI清除
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiClear(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiStop(Bit16 clientNo)
//
//    功能：
//            MDI停止
//
//    参数：
//
//    描述：
//            NCU处理后发送ncEvtStopAck；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiStop(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlMdiClose(Bit16 clientNo)
//
//    功能：
//            MDI关闭
//
//    参数：
//
//    描述：
//            NCU处理后发送ncEvtMdiExit；
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
HNCAPI Bit32 HNC_SysCtrlMdiClose(Bit16 clientNo = 0);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_SysCtrlPlcInit(void)
//
//    功能：
//            PLC初始化
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_SysCtrlPlcInit(void);

///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlGetConfig(Bit32 type, Bit8 *cfg)
//
//    功能：
//            获取指定类型的配置文本（系统路径和系统文件）
//
//    参数：
//            type ：配置类型；enum SysCtrlConfigType
//            cfg  ：配置文本；PATH_NAME_LEN
//
//    描述：
//            
//
//    返回：
//            0：成功；-1：失败；
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlGetConfig(Bit32 type, Bit8 *cfg);

///////////////////////////////////////////////////////////////////////////////
//
//    bool sys_start_decoder(void)
//
//    功能：
//            开启解释器线程
//
//    参数：
//
//    描述：
//            仅windows
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern bool sys_start_decoder(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void sys_stop_decoder(void)
//
//    功能：
//            停止解释器线程
//
//    参数：
//
//    描述：
//            仅windows
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void sys_stop_decoder(void);

///////////////////////////////////////////////////////////////////////////////
//
//    bool sys_start_interpolator(void)
//
//    功能：
//            开启插补器线程
//
//    参数：
//
//    描述：
//            仅windows
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern bool sys_start_interpolator(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void sys_stop_interpolator(void)
//
//    功能：
//            停止插补器线程
//
//    参数：
//
//    描述：
//            仅windows
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void sys_stop_interpolator(void);

///////////////////////////////////////////////////////////////////////////////
//
//    void HNC_SysCtrlWriteApiLog(uBit8 ucLogLevel, Bit8* pLogFormat, ...)
//
//    功能：
//            写API日志
//
//    参数：
//            ucLogLevel ：API日志级别，数值定义在ENUM_LOG_LEVEL中
//            pLogFormat ：日志内容的格式化文本
//
//    描述：
//            
//
//    返回：
//            
//
//////////////////////////////////////////////////////////////////////////
extern void HNC_SysCtrlWriteApiLog(uBit8 ucLogLevel, Bit8* pLogFormat, ...);


///////////////////////////////////////////////////////////////////////////////
//
//    Bit32 HNC_SysCtrlDictReset(void)
//
//    功能：
//            复位总线的数据字典
//
//    参数：
//
//    描述：
//            
//
//    返回：
//            0：成功；其他：失败
//
//////////////////////////////////////////////////////////////////////////
extern Bit32 HNC_SysCtrlDictReset(void);

#endif // __HNC_SYS_CTRL_H__
